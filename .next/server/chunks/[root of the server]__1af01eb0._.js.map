{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code%20file/rf/ve/src/app/api/send-email/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { name, company, email, phone, product, quantity, requirements } = await req.json();\r\n\r\n    // Configure Nodemailer Transporter\r\n    const transporter = nodemailer.createTransport({\r\n      service: \"gmail\", // Change this if using another email provider\r\n      auth: {\r\n        user: process.env.EMAIL_USER, // Your email address\r\n        pass: process.env.EMAIL_PASS, // Your email password or app password\r\n      },\r\n    });\r\n\r\n    // Email Content\r\n    const mailOptions = {\r\n      from: process.env.EMAIL_USER,\r\n      to: process.env.RECIPIENT_EMAIL, // Change this to the recipient's email\r\n      subject: `New Enquiry from ${name}`,\r\n      text: `\r\n        Name: ${name}\r\n        Company: ${company}\r\n        Email: ${email}\r\n        Phone: ${phone}\r\n        Product: ${product}\r\n        Quantity: ${quantity}\r\n        Requirements: ${requirements}\r\n      `,\r\n    };\r\n\r\n    // Send Email\r\n    await transporter.sendMail(mailOptions);\r\n\r\n    return NextResponse.json({ message: \"Email sent successfully!\" }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Error sending email:\", error);\r\n    return NextResponse.json({ error: \"Failed to send email\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;;;;;;;AAGO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,IAAI;QAEvF,mCAAmC;QACnC,MAAM,cAAc,WAAW,eAAe,CAAC;YAC7C,SAAS;YACT,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;gBAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC9B;QACF;QAEA,gBAAgB;QAChB,MAAM,cAAc;YAClB,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,IAAI,QAAQ,GAAG,CAAC,eAAe;YAC/B,SAAS,CAAC,iBAAiB,EAAE,MAAM;YACnC,MAAM,CAAC;cACC,EAAE,KAAK;iBACJ,EAAE,QAAQ;eACZ,EAAE,MAAM;eACR,EAAE,MAAM;iBACN,EAAE,QAAQ;kBACT,EAAE,SAAS;sBACP,EAAE,aAAa;MAC/B,CAAC;QACH;QAEA,aAAa;QACb,MAAM,YAAY,QAAQ,CAAC;QAE3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAClF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}